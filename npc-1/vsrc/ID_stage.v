// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifdef RANDOMIZE_MEM_INIT
  `define RANDOMIZE
`endif // RANDOMIZE_MEM_INIT

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifdef RANDOMIZE
  `ifdef VERILATOR
    `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
  `else  // VERILATOR
    `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
  `endif // VERILATOR
`else  // RANDOMIZE
  `define INIT_RANDOM_PROLOG_
`endif // RANDOMIZE

// VCS coverage exclude_file
module rf_combMem(	// regfile.scala:36:17
  input  [4:0]  R0_addr,
  input         R0_en,
                R0_clk,
  input  [4:0]  R1_addr,
  input         R1_en,
                R1_clk,
  input  [4:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [31:0] W0_data,
  output [31:0] R0_data,
                R1_data);

  reg [31:0] Memory[0:31];	// regfile.scala:36:17
  always @(posedge W0_clk) begin	// regfile.scala:36:17
    if (W0_en)	// regfile.scala:36:17
      Memory[W0_addr] <= W0_data;	// regfile.scala:36:17
  end // always @(posedge)
  `ifndef SYNTHESIS	// regfile.scala:36:17
    `ifdef RANDOMIZE_MEM_INIT	// regfile.scala:36:17
      integer initvar;	// regfile.scala:36:17
      reg [31:0] _RANDOM_MEM;	// regfile.scala:36:17
    `endif // RANDOMIZE_MEM_INIT
    initial begin	// regfile.scala:36:17
      `INIT_RANDOM_PROLOG_	// regfile.scala:36:17
      `ifdef RANDOMIZE_MEM_INIT	// regfile.scala:36:17
        for (initvar = 0; initvar < 32; initvar = initvar + 1) begin
          _RANDOM_MEM = {`RANDOM};
          Memory[initvar] = _RANDOM_MEM[31:0];
        end	// regfile.scala:36:17
      `endif // RANDOMIZE_MEM_INIT
    end // initial
  `endif // not def SYNTHESIS
  assign R0_data = R0_en ? Memory[R0_addr] : 32'bx;	// regfile.scala:36:17
  assign R1_data = R1_en ? Memory[R1_addr] : 32'bx;	// regfile.scala:36:17
endmodule

module regfile(	// <stdin>:2:10
  input         clock,
  input  [4:0]  io_raddr1,
                io_raddr2,
  output [31:0] io_rdata1,
                io_rdata2);

  wire [31:0] _rf_ext_R0_data;	// regfile.scala:36:17
  wire [31:0] _rf_ext_R1_data;	// regfile.scala:36:17
  rf_combMem rf_ext (	// regfile.scala:36:17
    .R0_addr (io_raddr1),
    .R0_en   (1'h1),	// <stdin>:2:10
    .R0_clk  (clock),
    .R1_addr (io_raddr2),
    .R1_en   (1'h1),	// <stdin>:2:10
    .R1_clk  (clock),
    .W0_addr (5'h0),	// <stdin>:2:10
    .W0_en   (1'h1),	// <stdin>:2:10
    .W0_clk  (clock),
    .W0_data (32'h0),	// <stdin>:2:10
    .R0_data (_rf_ext_R0_data),
    .R1_data (_rf_ext_R1_data)
  );
  assign io_rdata1 = io_raddr1 == 5'h0 ? 32'h0 : _rf_ext_R0_data;	// <stdin>:2:10, regfile.scala:36:17, :38:{21,32}
  assign io_rdata2 = io_raddr2 == 5'h0 ? 32'h0 : _rf_ext_R1_data;	// <stdin>:2:10, regfile.scala:36:17, :39:{21,32}
endmodule

module ID_stage(	// <stdin>:20:10
  input         clock,
                reset,
  input  [31:0] fromfs_pc,
                fromfs_inst,
  output [31:0] toes_pc,
                toes_alu_src1,
                toes_alu_src2,
  output [18:0] toes_alu_op,
  output [4:0]  toes_rf_waddr,
  output        br_taken,
  output [31:0] br_target);

  wire [31:0] _reg_io_rdata1;	// ID_stage.scala:48:21
  wire [31:0] _reg_io_rdata2;	// ID_stage.scala:48:21
  wire [16:0] _GEN = ~(fromfs_inst[31:15]);	// pla.scala:78:21
  wire [16:0] _decode_res_T_52 = {_GEN[0], _GEN[1], fromfs_inst[17], _GEN[3], fromfs_inst[19], _GEN[5], fromfs_inst[21],
                _GEN[7], _GEN[8], _GEN[9], _GEN[10], _GEN[11], _GEN[12], _GEN[13], _GEN[14], _GEN[15],
                _GEN[16]};	// Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29
  wire [8:0]  _decode_res_T_64 = {_GEN[7], _GEN[9], fromfs_inst[25], _GEN[11], _GEN[12], _GEN[13], _GEN[14], _GEN[15],
                _GEN[16]};	// Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29
  wire [8:0]  _decode_res_T_66 = {_GEN[8], _GEN[9], fromfs_inst[25], _GEN[11], _GEN[12], _GEN[13], _GEN[14], _GEN[15],
                _GEN[16]};	// Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29
  wire [5:0]  _decode_res_T_90 = {_GEN[10], fromfs_inst[26], fromfs_inst[28], _GEN[14], _GEN[15], _GEN[16]};	// Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29
  wire [7:0]  _decode_res_T_96 = {_GEN[8], _GEN[9], _GEN[11], fromfs_inst[27], _GEN[13], fromfs_inst[29], _GEN[15],
                _GEN[16]};	// Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29
  wire [7:0]  _decode_res_T_98 = {_GEN[7], _GEN[10], _GEN[11], fromfs_inst[27], _GEN[13], fromfs_inst[29], _GEN[15],
                _GEN[16]};	// Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29
  wire [7:0]  _decode_res_T_100 = {_GEN[8], _GEN[10], _GEN[11], fromfs_inst[27], _GEN[13], fromfs_inst[29], _GEN[15],
                _GEN[16]};	// Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29
  wire [4:0]  _decode_res_T_136 = {_GEN[12], fromfs_inst[28], _GEN[14], fromfs_inst[30], _GEN[16]};	// Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29
  wire [3:0]  inst_type = {|{&{fromfs_inst[22], fromfs_inst[24], fromfs_inst[25], _GEN[11], _GEN[12], _GEN[13],
                _GEN[14], _GEN[15], _GEN[16]}, &{fromfs_inst[23], fromfs_inst[24], fromfs_inst[25],
                _GEN[11], _GEN[12], _GEN[13], _GEN[14], _GEN[15], _GEN[16]}}, |{&_decode_res_T_52,
                &_decode_res_T_90, &{fromfs_inst[26], fromfs_inst[27], _GEN[14], fromfs_inst[30],
                _GEN[16]}, &{fromfs_inst[28], _GEN[14], fromfs_inst[30], _GEN[16]}, &{_GEN[13],
                fromfs_inst[29], fromfs_inst[30], _GEN[16]}}, |{&_decode_res_T_52, &{fromfs_inst[15],
                _GEN[1], _GEN[2], _GEN[3], _GEN[5], _GEN[6], fromfs_inst[22], _GEN[8], _GEN[9], _GEN[10],
                _GEN[11], _GEN[12], _GEN[13], _GEN[14], _GEN[15], _GEN[16]}, &{fromfs_inst[15], _GEN[1],
                _GEN[2], _GEN[4], _GEN[5], _GEN[6], fromfs_inst[22], _GEN[8], _GEN[9], _GEN[10], _GEN[11],
                _GEN[12], _GEN[13], _GEN[14], _GEN[15], _GEN[16]}, &_decode_res_T_64, &_decode_res_T_66,
                &_decode_res_T_96, &_decode_res_T_98, &_decode_res_T_100, &_decode_res_T_136}, |{&{_GEN[0],
                _GEN[1], _GEN[2], fromfs_inst[20], _GEN[6], _GEN[7], _GEN[8], _GEN[9], _GEN[10], _GEN[11],
                _GEN[12], _GEN[13], _GEN[14], _GEN[15], _GEN[16]}, &{_GEN[0], _GEN[2], _GEN[4],
                fromfs_inst[20], _GEN[6], _GEN[7], _GEN[8], _GEN[9], _GEN[10], _GEN[11], _GEN[12],
                _GEN[13], _GEN[14], _GEN[15], _GEN[16]}, &{_GEN[1], fromfs_inst[17], _GEN[3], _GEN[4],
                fromfs_inst[20], _GEN[6], _GEN[7], _GEN[8], _GEN[9], _GEN[10], _GEN[11], _GEN[12],
                _GEN[13], _GEN[14], _GEN[15], _GEN[16]}, &{_GEN[0], _GEN[2], fromfs_inst[18],
                fromfs_inst[20], _GEN[6], _GEN[7], _GEN[8], _GEN[9], _GEN[10], _GEN[11], _GEN[12],
                _GEN[13], _GEN[14], _GEN[15], _GEN[16]}, &{_GEN[1], _GEN[2], fromfs_inst[18],
                fromfs_inst[20], _GEN[6], _GEN[7], _GEN[8], _GEN[9], _GEN[10], _GEN[11], _GEN[12],
                _GEN[13], _GEN[14], _GEN[15], _GEN[16]}, &{fromfs_inst[16], fromfs_inst[18], _GEN[4],
                fromfs_inst[20], _GEN[6], _GEN[7], _GEN[8], _GEN[9], _GEN[10], _GEN[11], _GEN[12],
                _GEN[13], _GEN[14], _GEN[15], _GEN[16]}, &{_GEN[2], _GEN[3], _GEN[4], _GEN[5],
                fromfs_inst[21], _GEN[7], _GEN[8], _GEN[9], _GEN[10], _GEN[11], _GEN[12], _GEN[13],
                _GEN[14], _GEN[15], _GEN[16]}, &_decode_res_T_52, &_decode_res_T_64, &_decode_res_T_66,
                &_decode_res_T_90, &_decode_res_T_96, &_decode_res_T_98, &_decode_res_T_100}};	// Cat.scala:33:92, ID_stage.scala:32:31, pla.scala:78:21, :90:45, :91:29, :98:74, :114:39
  wire [4:0]  inst_name = {|{&{_GEN[14], _GEN[15], _GEN[16]}, &{_GEN[13], _GEN[14], fromfs_inst[30], _GEN[16]}},
                |{&{_GEN[7], fromfs_inst[23], _GEN[10], _GEN[11], fromfs_inst[27], _GEN[13],
                fromfs_inst[29], _GEN[15], _GEN[16]}, &{fromfs_inst[24], _GEN[10], _GEN[11],
                fromfs_inst[27], _GEN[13], fromfs_inst[29], _GEN[15], _GEN[16]}, &{fromfs_inst[25],
                _GEN[11], fromfs_inst[27], _GEN[13], fromfs_inst[29], _GEN[15], _GEN[16]},
                &_decode_res_T_136}, |{&{_GEN[8], _GEN[9], _GEN[10], _GEN[11], fromfs_inst[27], _GEN[13],
                fromfs_inst[29], _GEN[15], _GEN[16]}, &{fromfs_inst[22], _GEN[10], _GEN[11],
                fromfs_inst[27], _GEN[13], fromfs_inst[29], _GEN[15], _GEN[16]}, &{fromfs_inst[23],
                fromfs_inst[24], _GEN[10], _GEN[11], fromfs_inst[27], _GEN[13], fromfs_inst[29], _GEN[15],
                _GEN[16]}, &_decode_res_T_136, &{fromfs_inst[27], _GEN[13], fromfs_inst[29],
                fromfs_inst[30], _GEN[16]}}, |{&{_GEN[7], _GEN[8], _GEN[10], _GEN[11], fromfs_inst[27],
                _GEN[13], fromfs_inst[29], _GEN[15], _GEN[16]}, &{fromfs_inst[22], _GEN[9], _GEN[11],
                fromfs_inst[27], _GEN[13], fromfs_inst[29], _GEN[15], _GEN[16]}, &_decode_res_T_136,
                &{_GEN[12], _GEN[13], fromfs_inst[29], fromfs_inst[30], _GEN[16]}}, |{&{fromfs_inst[26],
                fromfs_inst[28], _GEN[14], _GEN[16]}, &{fromfs_inst[22], _GEN[8], _GEN[9], _GEN[10],
                _GEN[11], fromfs_inst[27], _GEN[13], fromfs_inst[29], _GEN[15], _GEN[16]}, &{_GEN[7],
                fromfs_inst[24], _GEN[10], _GEN[11], fromfs_inst[27], _GEN[13], fromfs_inst[29], _GEN[15],
                _GEN[16]}, &{_GEN[7], _GEN[8], _GEN[9], fromfs_inst[25], _GEN[11], fromfs_inst[27],
                _GEN[13], fromfs_inst[29], _GEN[15], _GEN[16]}, &{fromfs_inst[26], _GEN[13],
                fromfs_inst[29], fromfs_inst[30], _GEN[16]}}};	// Cat.scala:33:92, ID_stage.scala:34:31, pla.scala:78:21, :90:45, :91:29, :98:74, :114:39
  wire        _rk_or_rd_T_1 = inst_type == 4'h4;	// ID_stage.scala:32:31, :42:20
  wire [31:0] _imm_T_11 = inst_type == 4'h2 ? {27'h0, fromfs_inst[14:10]} : inst_type == 4'h3 ?
                {{20{fromfs_inst[21]}}, fromfs_inst[21:10]} : inst_type == 4'h8 ? {20'h0,
                fromfs_inst[21:10]} : _rk_or_rd_T_1 ? 32'h4 : inst_type == 4'h5 ? {fromfs_inst[24:5],
                12'h0} : {29'h0, inst_type == 4'h6, 2'h0};	// Cat.scala:33:92, ID_stage.scala:18:18, :20:22, :23:26, :32:31, :39:20, :40:20, :41:20, :42:20, :43:20, :44:20, Mux.scala:101:16, pla.scala:114:39, tool.scala:8:14
  wire        _br_taken_T_20 = inst_name == 5'hE;	// ID_stage.scala:34:31, :58:34
  wire        rj_eq_rd = _reg_io_rdata1 == _reg_io_rdata2;	// ID_stage.scala:48:21, :61:30
  wire [32:0] _GEN_0 = {1'h0, _reg_io_rdata1} + {1'h0, _reg_io_rdata2} + 33'h1;	// ID_stage.scala:42:20, :48:21, :62:{30,43}
  wire        slt_res = _reg_io_rdata1[31] & ~(_reg_io_rdata2[31]) | (_reg_io_rdata1[31] ^ ~(_reg_io_rdata2[31])) &
                _GEN_0[31];	// ID_stage.scala:48:21, :62:43, :63:{27,32,34,44,49,51,83,94}
  wire        _toes_alu_src1_T = inst_name == 5'h10;	// ID_stage.scala:34:31, :47:30, :71:84
  regfile reg_1 (	// ID_stage.scala:48:21
    .clock     (clock),
    .io_raddr1 (fromfs_inst[9:5]),	// ID_stage.scala:16:18
    .io_raddr2 (inst_name != 5'h10 & _rk_or_rd_T_1 ? fromfs_inst[14:10] : fromfs_inst[4:0]),	// ID_stage.scala:17:18, :18:18, :34:31, :42:20, :47:{30,47}, :50:25
    .io_rdata1 (_reg_io_rdata1),
    .io_rdata2 (_reg_io_rdata2)
  );
  assign toes_pc = fromfs_pc;	// <stdin>:20:10
  assign toes_alu_src1 = fromfs_pc;	// <stdin>:20:10
  assign toes_alu_src2 = inst_type == 4'h1 ? _reg_io_rdata2 : _imm_T_11;	// <stdin>:20:10, ID_stage.scala:32:31, :48:21, :77:{25,36}, Mux.scala:101:16
  assign toes_alu_op = {&{fromfs_inst[15], fromfs_inst[16], _GEN[2], _GEN[3], _GEN[4], _GEN[5], fromfs_inst[21],
                _GEN[7], _GEN[8], _GEN[9], _GEN[10], _GEN[11], _GEN[12], _GEN[13], _GEN[14], _GEN[15],
                _GEN[16]}, &{fromfs_inst[15], _GEN[1], _GEN[2], _GEN[3], _GEN[4], _GEN[5], fromfs_inst[21],
                _GEN[7], _GEN[8], _GEN[9], _GEN[10], _GEN[11], _GEN[12], _GEN[13], _GEN[14], _GEN[15],
                _GEN[16]}, &{_GEN[0], fromfs_inst[16], _GEN[2], _GEN[3], _GEN[4], _GEN[5], fromfs_inst[21],
                _GEN[7], _GEN[8], _GEN[9], _GEN[10], _GEN[11], _GEN[12], _GEN[13], _GEN[14], _GEN[15],
                _GEN[16]}, &{_GEN[0], _GEN[1], _GEN[2], _GEN[3], _GEN[4], _GEN[5], fromfs_inst[21],
                _GEN[7], _GEN[8], _GEN[9], _GEN[10], _GEN[11], _GEN[12], _GEN[13], _GEN[14], _GEN[15],
                _GEN[16]}, &{fromfs_inst[16], _GEN[2], fromfs_inst[18], fromfs_inst[19], fromfs_inst[20],
                _GEN[6], _GEN[7], _GEN[8], _GEN[9], _GEN[10], _GEN[11], _GEN[12], _GEN[13], _GEN[14],
                _GEN[15], _GEN[16]}, &{fromfs_inst[15], _GEN[1], _GEN[2], fromfs_inst[18], fromfs_inst[19],
                fromfs_inst[20], _GEN[6], _GEN[7], _GEN[8], _GEN[9], _GEN[10], _GEN[11], _GEN[12],
                _GEN[13], _GEN[14], _GEN[15], _GEN[16]}, &{_GEN[0], _GEN[1], _GEN[2], fromfs_inst[18],
                fromfs_inst[19], fromfs_inst[20], _GEN[6], _GEN[7], _GEN[8], _GEN[9], _GEN[10], _GEN[11],
                _GEN[12], _GEN[13], _GEN[14], _GEN[15], _GEN[16]}, &{_GEN[12], fromfs_inst[28], _GEN[14],
                _GEN[15], _GEN[16]}, |{&{_GEN[3], fromfs_inst[19], fromfs_inst[20], _GEN[6], _GEN[7],
                _GEN[8], _GEN[9], _GEN[10], _GEN[11], _GEN[12], _GEN[13], _GEN[14], _GEN[15], _GEN[16]},
                &{fromfs_inst[19], _GEN[5], _GEN[6], fromfs_inst[22], _GEN[8], _GEN[9], _GEN[10], _GEN[11],
                _GEN[12], _GEN[13], _GEN[14], _GEN[15], _GEN[16]}}, |{&{fromfs_inst[15], fromfs_inst[16],
                fromfs_inst[17], fromfs_inst[18], _GEN[4], fromfs_inst[20], _GEN[6], _GEN[7], _GEN[8],
                _GEN[9], _GEN[10], _GEN[11], _GEN[12], _GEN[13], _GEN[14], _GEN[15], _GEN[16]},
                &{fromfs_inst[18], _GEN[4], _GEN[5], _GEN[6], fromfs_inst[22], _GEN[8], _GEN[9], _GEN[10],
                _GEN[11], _GEN[12], _GEN[13], _GEN[14], _GEN[15], _GEN[16]}}, |{&{_GEN[0], fromfs_inst[16],
                fromfs_inst[17], fromfs_inst[18], _GEN[4], fromfs_inst[20], _GEN[6], _GEN[7], _GEN[8],
                _GEN[9], _GEN[10], _GEN[11], _GEN[12], _GEN[13], _GEN[14], _GEN[15], _GEN[16]}, &{_GEN[3],
                _GEN[4], _GEN[5], _GEN[6], fromfs_inst[22], _GEN[8], _GEN[9], _GEN[10], _GEN[11], _GEN[12],
                _GEN[13], _GEN[14], _GEN[15], _GEN[16]}}, |{&{fromfs_inst[15], fromfs_inst[16], _GEN[2],
                fromfs_inst[18], _GEN[4], fromfs_inst[20], _GEN[6], _GEN[7], _GEN[8], _GEN[9], _GEN[10],
                _GEN[11], _GEN[12], _GEN[13], _GEN[14], _GEN[15], _GEN[16]}, &{fromfs_inst[22],
                fromfs_inst[23], fromfs_inst[24], fromfs_inst[25], _GEN[11], _GEN[12], _GEN[13], _GEN[14],
                _GEN[15], _GEN[16]}}, |{&{_GEN[0], fromfs_inst[16], _GEN[2], fromfs_inst[18], _GEN[4],
                fromfs_inst[20], _GEN[6], _GEN[7], _GEN[8], _GEN[9], _GEN[10], _GEN[11], _GEN[12],
                _GEN[13], _GEN[14], _GEN[15], _GEN[16]}, &{_GEN[7], fromfs_inst[23], fromfs_inst[24],
                fromfs_inst[25], _GEN[11], _GEN[12], _GEN[13], _GEN[14], _GEN[15], _GEN[16]}}, &{_GEN[0],
                _GEN[1], _GEN[2], fromfs_inst[18], _GEN[4], fromfs_inst[20], _GEN[6], _GEN[7], _GEN[8],
                _GEN[9], _GEN[10], _GEN[11], _GEN[12], _GEN[13], _GEN[14], _GEN[15], _GEN[16]},
                |{&{fromfs_inst[15], _GEN[1], _GEN[2], fromfs_inst[18], _GEN[4], fromfs_inst[20], _GEN[6],
                _GEN[7], _GEN[8], _GEN[9], _GEN[10], _GEN[11], _GEN[12], _GEN[13], _GEN[14], _GEN[15],
                _GEN[16]}, &{_GEN[8], fromfs_inst[24], fromfs_inst[25], _GEN[11], _GEN[12], _GEN[13],
                _GEN[14], _GEN[15], _GEN[16]}}, |{&{fromfs_inst[15], _GEN[1], fromfs_inst[17], _GEN[3],
                _GEN[4], fromfs_inst[20], _GEN[6], _GEN[7], _GEN[8], _GEN[9], _GEN[10], _GEN[11], _GEN[12],
                _GEN[13], _GEN[14], _GEN[15], _GEN[16]}, &{fromfs_inst[22], _GEN[8], _GEN[9],
                fromfs_inst[25], _GEN[11], _GEN[12], _GEN[13], _GEN[14], _GEN[15], _GEN[16]}}, |{&{_GEN[0],
                _GEN[1], fromfs_inst[17], _GEN[3], _GEN[4], fromfs_inst[20], _GEN[6], _GEN[7], _GEN[8],
                _GEN[9], _GEN[10], _GEN[11], _GEN[12], _GEN[13], _GEN[14], _GEN[15], _GEN[16]}, &{_GEN[7],
                _GEN[8], _GEN[9], fromfs_inst[25], _GEN[11], _GEN[12], _GEN[13], _GEN[14], _GEN[15],
                _GEN[16]}}, &{fromfs_inst[16], _GEN[2], _GEN[3], _GEN[4], fromfs_inst[20], _GEN[6],
                _GEN[7], _GEN[8], _GEN[9], _GEN[10], _GEN[11], _GEN[12], _GEN[13], _GEN[14], _GEN[15],
                _GEN[16]}, |{&{_GEN[1], _GEN[2], _GEN[3], _GEN[4], fromfs_inst[20], _GEN[6], _GEN[7],
                _GEN[8], _GEN[9], _GEN[10], _GEN[11], _GEN[12], _GEN[13], _GEN[14], _GEN[15], _GEN[16]},
                &{fromfs_inst[23], _GEN[9], fromfs_inst[25], _GEN[11], _GEN[12], _GEN[13], _GEN[14],
                _GEN[15], _GEN[16]}, &{fromfs_inst[27], fromfs_inst[28], _GEN[14], _GEN[15], _GEN[16]},
                &{_GEN[8], _GEN[11], fromfs_inst[27], _GEN[13], fromfs_inst[29], _GEN[15], _GEN[16]},
                &_decode_res_T_98, &{fromfs_inst[30], _GEN[16]}}};	// <stdin>:20:10, Cat.scala:33:92, ID_stage.scala:31:30, pla.scala:78:21, :90:45, :91:29, :98:74, :114:39
  assign toes_rf_waddr = _br_taken_T_20 ? 5'h1 : fromfs_inst[4:0];	// <stdin>:20:10, ID_stage.scala:17:18, :58:{23,34}
  assign br_taken = inst_name == 5'h0 & rj_eq_rd | inst_name == 5'h1 & ~rj_eq_rd | inst_name == 5'h2 & slt_res
                | inst_name == 5'h3 & ~slt_res | inst_name == 5'h4 & ~(_GEN_0[32]) | inst_name == 5'h5 &
                _GEN_0[32] | _br_taken_T_20 | inst_name == 5'hF | _toes_alu_src1_T;	// <stdin>:20:10, ID_stage.scala:34:31, :58:{23,34}, :61:30, :62:43, :63:49, :64:{20,30}, :65:{29,46}, :66:{31,48,50}, :67:{31,48}, :68:{31,48,50}, :69:{31,48}, :70:{31,48}, :71:{57,72,84}, pla.scala:114:39
  assign br_target = (_toes_alu_src1_T ? _reg_io_rdata1 : fromfs_pc) + _imm_T_11;	// <stdin>:20:10, ID_stage.scala:48:21, :71:84, :73:{21,67}, Mux.scala:101:16
endmodule

