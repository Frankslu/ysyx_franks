package cpucore.Unit

import chisel3._
import chisel3.util.experimental.decode.TruthTable
import chisel3.util.experimental.decode.decoder
import chisel3.util.BitPat

import cpucore.Unit.ALUOP._

object loongarch32r_inst{
    //inst_type
    val INV     = "0000"
    val R3      = "0001"
    val R2I5    = "0010"
    val R2I12   = "0011"
    val R2I16   = "0100"
    val R1I20   = "0101"
    val I26     = "0110"
    val BRK_T    = "0111"
//    val R2
//    val R4
//    val R2I8
//    val R2I14
//    val R1I21

    //MEM
    val MEM_EN = "0"
    val MEM_UN = "1"
    val MEM_NN = "?"

    //special inst
    val inst_ld_h
    val inst_ld
    

    //I26
    def B         = BitPat("b010100_????????????????_??????????"    ) 
    def BL        = BitPat("b010101_????????????????_??????????"    )
    //2RI16 
    def JIRL      = BitPat("b010011_????????????????_?????_?????"   ) 
    def BEQ       = BitPat("b010110_????????????????_?????_?????"   ) 
    def BNE       = BitPat("b010111_????????????????_?????_?????"   ) 
    def BLT       = BitPat("b011000_????????????????_?????_?????"   ) 
    def BGE       = BitPat("b011001_????????????????_?????_?????"   ) 
    def BLTU      = BitPat("b011010_????????????????_?????_?????"   ) 
    def BGEU      = BitPat("b011011_????????????????_?????_?????"   )
    //1RI20 
    def LU12I_W   = BitPat("b0001010_?????_?????_?????_?????_?????" ) 
    def PCADDU12I = BitPat("b0001110_?????_?????_?????_?????_?????" )
    //2RI12
    def SLTI      = BitPat("b0000001000_????????????_?????_?????"   ) 
    def SLTUI     = BitPat("b0000001001_????????????_?????_?????"   ) 
    def ADDI_W    = BitPat("b0000001010_????????????_?????_?????"   ) 
    def ANDI      = BitPat("b0000001101_????????????_?????_?????"   ) 
    def ORI       = BitPat("b0000001110_????????????_?????_?????"   ) 
    def XORI      = BitPat("b0000001111_????????????_?????_?????"   ) 
    def LD_B      = BitPat("b0010100000_????????????_?????_?????"   ) 
    def LD_H      = BitPat("b0010100001_????????????_?????_?????"   ) 
    def LD_W      = BitPat("b0010100010_????????????_?????_?????"   ) 
    def ST_B      = BitPat("b0010100100_????????????_?????_?????"   ) 
    def ST_H      = BitPat("b0010100101_????????????_?????_?????"   ) 
    def ST_W      = BitPat("b0010100110_????????????_?????_?????"   ) 
    def LD_BU     = BitPat("b0010101000_????????????_?????_?????"   ) 
    def LD_HU     = BitPat("b0010101001_????????????_?????_?????"   )
    //3R 
    def ADD_W     = BitPat("b00000000000100000_?????_?????_?????"   ) 
    def SUB_W     = BitPat("b00000000000100010_?????_?????_?????"   ) 
    def SLT       = BitPat("b00000000000100100_?????_?????_?????"   ) 
    def SLTU      = BitPat("b00000000000100101_?????_?????_?????"   ) 
    def NOR       = BitPat("b00000000000101000_?????_?????_?????"   ) 
    def AND       = BitPat("b00000000000101001_?????_?????_?????"   ) 
    def MOVE      = BitPat("b00000000000101010_?????_?????_?????"   )
    def XOR       = BitPat("b00000000000101011_?????_?????_?????"   ) 
    def SLL_W     = BitPat("b00000000000101110_?????_?????_?????"   ) 
    def SRL_W     = BitPat("b00000000000101111_?????_?????_?????"   ) 
    def SRA_W     = BitPat("b00000000000110000_?????_?????_?????"   ) 
    def MUL_W     = BitPat("b00000000000111000_?????_?????_?????"   ) 
    def MULH_W    = BitPat("b00000000000111001_?????_?????_?????"   ) 
    def MULH_WU   = BitPat("b00000000000111010_?????_?????_?????"   ) 
    def DIV_W     = BitPat("b00000000001000000_?????_?????_?????"   ) 
    def MOD_W     = BitPat("b00000000001000001_?????_?????_?????"   ) 
    def DIV_WU    = BitPat("b00000000001000010_?????_?????_?????"   ) 
    def MOD_WU    = BitPat("b00000000001000011_?????_?????_?????"   ) 
    def SLLI_W    = BitPat("b00000000010000001_?????_?????_?????"   )//shift 
    def SRLI_W    = BitPat("b00000000010001001_?????_?????_?????"   )//shift
    def SRAI_W    = BitPat("b00000000010010001_?????_?????_?????"   )//shift
    def BREAK     = BitPat("b0000_0000_0010_10100_?????_?????_?????") 

    
    val inst_table = TruthTable(Map(
        //                      ALUOP   INSTTYPE   MEMEN  INST  WSTRB  RFWE 
        B         -> BitPat("b" +OP_NONE  +I26   +MEM_UN ),
        BL        -> BitPat("b" +OP_ADD   +I26   +MEM_UN ),
        JIRL      -> BitPat("b" +OP_ADD   +R2I16 +MEM_UN ),
        BEQ       -> BitPat("b" +OP_NONE  +R2I16 +MEM_UN ),
        BNE       -> BitPat("b" +OP_NONE  +R2I16 +MEM_UN ),
        BLT       -> BitPat("b" +OP_NONE  +R2I16 +MEM_UN ),
        BGE       -> BitPat("b" +OP_NONE  +R2I16 +MEM_UN ),
        BLTU      -> BitPat("b" +OP_NONE  +R2I16 +MEM_UN ),
        BGEU      -> BitPat("b" +OP_NONE  +R2I16 +MEM_UN ),
        LU12I_W   -> BitPat("b" +OP_LUI   +R1I20 +MEM_UN ),
        PCADDU12I -> BitPat("b" +OP_ADD   +R1I20 +MEM_UN ),
        SLTI      -> BitPat("b" +OP_SLT   +R2I12 +MEM_UN ),
        SLTUI     -> BitPat("b" +OP_SLTU  +R2I12 +MEM_UN ),
        ADDI_W    -> BitPat("b" +OP_ADD   +R2I12 +MEM_UN ),
        ANDI      -> BitPat("b" +OP_AND   +R2I12 +MEM_UN ),
        ORI       -> BitPat("b" +OP_OR    +R2I12 +MEM_UN ),
        XORI      -> BitPat("b" +OP_XOR   +R2I12 +MEM_UN ),
        LD_B      -> BitPat("b" +OP_ADD   +R2I12 +MEM_EN ),
        LD_H      -> BitPat("b" +OP_ADD   +R2I12 +MEM_EN ),
        LD_W      -> BitPat("b" +OP_ADD   +R2I12 +MEM_EN ),
        ST_B      -> BitPat("b" +OP_ADD   +R2I12 +MEM_EN ),
        ST_H      -> BitPat("b" +OP_ADD   +R2I12 +MEM_EN ),
        ST_W      -> BitPat("b" +OP_ADD   +R2I12 +MEM_EN ),
        LD_BU     -> BitPat("b" +OP_ADD   +R2I12 +MEM_EN ),
        LD_HU     -> BitPat("b" +OP_ADD   +R2I12 +MEM_EN ),
        ADD_W     -> BitPat("b" +OP_ADD   +R3    +MEM_UN ),
        SUB_W     -> BitPat("b" +OP_SUB   +R3    +MEM_UN ),
        SLT       -> BitPat("b" +OP_SLT   +R3    +MEM_UN ),
        SLTU      -> BitPat("b" +OP_SLTU  +R3    +MEM_UN ),
        NOR       -> BitPat("b" +OP_NOR   +R3    +MEM_UN ),
        AND       -> BitPat("b" +OP_AND   +R3    +MEM_UN ),
        MOVE      -> BitPat("b" +OP_OR    +R3    +MEM_UN ),
        XOR       -> BitPat("b" +OP_XOR   +R3    +MEM_UN ),
        SLL_W     -> BitPat("b" +OP_SLL   +R3    +MEM_UN ),
        SRL_W     -> BitPat("b" +OP_SRL   +R3    +MEM_UN ),
        SRA_W     -> BitPat("b" +OP_SRA   +R3    +MEM_UN ),
        MUL_W     -> BitPat("b" +OP_MUL   +R3    +MEM_UN ),
        MULH_W    -> BitPat("b" +OP_MULH  +R3    +MEM_UN ),
        MULH_WU   -> BitPat("b" +OP_MULHU +R3    +MEM_UN ),
        DIV_W     -> BitPat("b" +OP_DIV   +R3    +MEM_UN ),
        MOD_W     -> BitPat("b" +OP_MOD   +R3    +MEM_UN ),
        DIV_WU    -> BitPat("b" +OP_DIVU  +R3    +MEM_UN ),
        MOD_WU    -> BitPat("b" +OP_MODU  +R3    +MEM_UN ),
        SLLI_W    -> BitPat("b" +OP_SLL   +R2I5  +MEM_UN ),
        SRLI_W    -> BitPat("b" +OP_SRL   +R2I5  +MEM_UN ),
        SRAI_W    -> BitPat("b" +OP_SRA   +R2I5  +MEM_UN ),
        BREAK     -> BitPat("b" +OP_NONE  +BRK_T +MEM_UN )),
                     BitPat("b" +OP_NONE  +INV   +MEM_NN ))

    def loongarch32r_decoder(inst : UInt) = decoder(inst, inst_table)
}