// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifdef RANDOMIZE_REG_INIT
  `define RANDOMIZE
`endif // RANDOMIZE_REG_INIT

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifdef RANDOMIZE
  `ifdef VERILATOR
    `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
  `else  // VERILATOR
    `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
  `endif // VERILATOR
`else  // RANDOMIZE
  `define INIT_RANDOM_PROLOG_
`endif // RANDOMIZE

module regfile(	// <stdin>:2:10
  input         clock,
                reset,
  input  [4:0]  io_waddr,
                io_raddr1,
                io_raddr2,
  input  [31:0] io_wdata,
  input         io_wen,
  output [31:0] io_rdata1,
                io_rdata2);

  reg  [31:0]       regfile_0;	// regfile.scala:15:22
  reg  [31:0]       regfile_1;	// regfile.scala:15:22
  reg  [31:0]       regfile_2;	// regfile.scala:15:22
  reg  [31:0]       regfile_3;	// regfile.scala:15:22
  reg  [31:0]       regfile_4;	// regfile.scala:15:22
  reg  [31:0]       regfile_5;	// regfile.scala:15:22
  reg  [31:0]       regfile_6;	// regfile.scala:15:22
  reg  [31:0]       regfile_7;	// regfile.scala:15:22
  reg  [31:0]       regfile_8;	// regfile.scala:15:22
  reg  [31:0]       regfile_9;	// regfile.scala:15:22
  reg  [31:0]       regfile_10;	// regfile.scala:15:22
  reg  [31:0]       regfile_11;	// regfile.scala:15:22
  reg  [31:0]       regfile_12;	// regfile.scala:15:22
  reg  [31:0]       regfile_13;	// regfile.scala:15:22
  reg  [31:0]       regfile_14;	// regfile.scala:15:22
  reg  [31:0]       regfile_15;	// regfile.scala:15:22
  reg  [31:0]       regfile_16;	// regfile.scala:15:22
  reg  [31:0]       regfile_17;	// regfile.scala:15:22
  reg  [31:0]       regfile_18;	// regfile.scala:15:22
  reg  [31:0]       regfile_19;	// regfile.scala:15:22
  reg  [31:0]       regfile_20;	// regfile.scala:15:22
  reg  [31:0]       regfile_21;	// regfile.scala:15:22
  reg  [31:0]       regfile_22;	// regfile.scala:15:22
  reg  [31:0]       regfile_23;	// regfile.scala:15:22
  reg  [31:0]       regfile_24;	// regfile.scala:15:22
  reg  [31:0]       regfile_25;	// regfile.scala:15:22
  reg  [31:0]       regfile_26;	// regfile.scala:15:22
  reg  [31:0]       regfile_27;	// regfile.scala:15:22
  reg  [31:0]       regfile_28;	// regfile.scala:15:22
  reg  [31:0]       regfile_29;	// regfile.scala:15:22
  reg  [31:0]       regfile_30;	// regfile.scala:15:22
  reg  [31:0]       regfile_31;	// regfile.scala:15:22
  wire [31:0][31:0] _GEN = {{regfile_31}, {regfile_30}, {regfile_29}, {regfile_28}, {regfile_27}, {regfile_26},
                {regfile_25}, {regfile_24}, {regfile_23}, {regfile_22}, {regfile_21}, {regfile_20},
                {regfile_19}, {regfile_18}, {regfile_17}, {regfile_16}, {regfile_15}, {regfile_14},
                {regfile_13}, {regfile_12}, {regfile_11}, {regfile_10}, {regfile_9}, {regfile_8},
                {regfile_7}, {regfile_6}, {regfile_5}, {regfile_4}, {regfile_3}, {regfile_2}, {regfile_1},
                {regfile_0}};	// regfile.scala:15:22, :21:21
  wire [31:0]       _GEN_0;	// regfile.scala:21:21
  /* synopsys infer_mux_override */
  assign _GEN_0 = _GEN[io_raddr1] /* cadence map_to_mux */;	// regfile.scala:21:21
  wire [31:0]       _GEN_1;	// regfile.scala:22:21
  /* synopsys infer_mux_override */
  assign _GEN_1 = _GEN[io_raddr2] /* cadence map_to_mux */;	// regfile.scala:21:21, :22:21
  always @(posedge clock) begin
    if (io_wen & io_waddr == 5'h0)	// regfile.scala:15:22, :17:17, :18:27
      regfile_0 <= io_wdata;	// regfile.scala:15:22
    if (io_wen & io_waddr == 5'h1)	// regfile.scala:15:22, :17:17, :18:27
      regfile_1 <= io_wdata;	// regfile.scala:15:22
    if (io_wen & io_waddr == 5'h2)	// regfile.scala:15:22, :17:17, :18:27
      regfile_2 <= io_wdata;	// regfile.scala:15:22
    if (io_wen & io_waddr == 5'h3)	// regfile.scala:15:22, :17:17, :18:27
      regfile_3 <= io_wdata;	// regfile.scala:15:22
    if (io_wen & io_waddr == 5'h4)	// regfile.scala:15:22, :17:17, :18:27
      regfile_4 <= io_wdata;	// regfile.scala:15:22
    if (io_wen & io_waddr == 5'h5)	// regfile.scala:15:22, :17:17, :18:27
      regfile_5 <= io_wdata;	// regfile.scala:15:22
    if (io_wen & io_waddr == 5'h6)	// regfile.scala:15:22, :17:17, :18:27
      regfile_6 <= io_wdata;	// regfile.scala:15:22
    if (io_wen & io_waddr == 5'h7)	// regfile.scala:15:22, :17:17, :18:27
      regfile_7 <= io_wdata;	// regfile.scala:15:22
    if (io_wen & io_waddr == 5'h8)	// regfile.scala:15:22, :17:17, :18:27
      regfile_8 <= io_wdata;	// regfile.scala:15:22
    if (io_wen & io_waddr == 5'h9)	// regfile.scala:15:22, :17:17, :18:27
      regfile_9 <= io_wdata;	// regfile.scala:15:22
    if (io_wen & io_waddr == 5'hA)	// regfile.scala:15:22, :17:17, :18:27
      regfile_10 <= io_wdata;	// regfile.scala:15:22
    if (io_wen & io_waddr == 5'hB)	// regfile.scala:15:22, :17:17, :18:27
      regfile_11 <= io_wdata;	// regfile.scala:15:22
    if (io_wen & io_waddr == 5'hC)	// regfile.scala:15:22, :17:17, :18:27
      regfile_12 <= io_wdata;	// regfile.scala:15:22
    if (io_wen & io_waddr == 5'hD)	// regfile.scala:15:22, :17:17, :18:27
      regfile_13 <= io_wdata;	// regfile.scala:15:22
    if (io_wen & io_waddr == 5'hE)	// regfile.scala:15:22, :17:17, :18:27
      regfile_14 <= io_wdata;	// regfile.scala:15:22
    if (io_wen & io_waddr == 5'hF)	// regfile.scala:15:22, :17:17, :18:27
      regfile_15 <= io_wdata;	// regfile.scala:15:22
    if (io_wen & io_waddr == 5'h10)	// regfile.scala:15:22, :17:17, :18:27
      regfile_16 <= io_wdata;	// regfile.scala:15:22
    if (io_wen & io_waddr == 5'h11)	// regfile.scala:15:22, :17:17, :18:27
      regfile_17 <= io_wdata;	// regfile.scala:15:22
    if (io_wen & io_waddr == 5'h12)	// regfile.scala:15:22, :17:17, :18:27
      regfile_18 <= io_wdata;	// regfile.scala:15:22
    if (io_wen & io_waddr == 5'h13)	// regfile.scala:15:22, :17:17, :18:27
      regfile_19 <= io_wdata;	// regfile.scala:15:22
    if (io_wen & io_waddr == 5'h14)	// regfile.scala:15:22, :17:17, :18:27
      regfile_20 <= io_wdata;	// regfile.scala:15:22
    if (io_wen & io_waddr == 5'h15)	// regfile.scala:15:22, :17:17, :18:27
      regfile_21 <= io_wdata;	// regfile.scala:15:22
    if (io_wen & io_waddr == 5'h16)	// regfile.scala:15:22, :17:17, :18:27
      regfile_22 <= io_wdata;	// regfile.scala:15:22
    if (io_wen & io_waddr == 5'h17)	// regfile.scala:15:22, :17:17, :18:27
      regfile_23 <= io_wdata;	// regfile.scala:15:22
    if (io_wen & io_waddr == 5'h18)	// regfile.scala:15:22, :17:17, :18:27
      regfile_24 <= io_wdata;	// regfile.scala:15:22
    if (io_wen & io_waddr == 5'h19)	// regfile.scala:15:22, :17:17, :18:27
      regfile_25 <= io_wdata;	// regfile.scala:15:22
    if (io_wen & io_waddr == 5'h1A)	// regfile.scala:15:22, :17:17, :18:27
      regfile_26 <= io_wdata;	// regfile.scala:15:22
    if (io_wen & io_waddr == 5'h1B)	// regfile.scala:15:22, :17:17, :18:27
      regfile_27 <= io_wdata;	// regfile.scala:15:22
    if (io_wen & io_waddr == 5'h1C)	// regfile.scala:15:22, :17:17, :18:27
      regfile_28 <= io_wdata;	// regfile.scala:15:22
    if (io_wen & io_waddr == 5'h1D)	// regfile.scala:15:22, :17:17, :18:27
      regfile_29 <= io_wdata;	// regfile.scala:15:22
    if (io_wen & io_waddr == 5'h1E)	// regfile.scala:15:22, :17:17, :18:27
      regfile_30 <= io_wdata;	// regfile.scala:15:22
    if (io_wen & (&io_waddr))	// regfile.scala:15:22, :17:17, :18:27
      regfile_31 <= io_wdata;	// regfile.scala:15:22
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:2:10
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:2:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:2:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_1;	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_2;	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_3;	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_4;	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_5;	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_6;	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_7;	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_8;	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_9;	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_10;	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_11;	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_12;	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_13;	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_14;	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_15;	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_16;	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_17;	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_18;	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_19;	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_20;	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_21;	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_22;	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_23;	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_24;	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_25;	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_26;	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_27;	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_28;	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_29;	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_30;	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_31;	// <stdin>:2:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:2:10
        `INIT_RANDOM_PROLOG_	// <stdin>:2:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:2:10
        _RANDOM_0 = `RANDOM;	// <stdin>:2:10
        _RANDOM_1 = `RANDOM;	// <stdin>:2:10
        _RANDOM_2 = `RANDOM;	// <stdin>:2:10
        _RANDOM_3 = `RANDOM;	// <stdin>:2:10
        _RANDOM_4 = `RANDOM;	// <stdin>:2:10
        _RANDOM_5 = `RANDOM;	// <stdin>:2:10
        _RANDOM_6 = `RANDOM;	// <stdin>:2:10
        _RANDOM_7 = `RANDOM;	// <stdin>:2:10
        _RANDOM_8 = `RANDOM;	// <stdin>:2:10
        _RANDOM_9 = `RANDOM;	// <stdin>:2:10
        _RANDOM_10 = `RANDOM;	// <stdin>:2:10
        _RANDOM_11 = `RANDOM;	// <stdin>:2:10
        _RANDOM_12 = `RANDOM;	// <stdin>:2:10
        _RANDOM_13 = `RANDOM;	// <stdin>:2:10
        _RANDOM_14 = `RANDOM;	// <stdin>:2:10
        _RANDOM_15 = `RANDOM;	// <stdin>:2:10
        _RANDOM_16 = `RANDOM;	// <stdin>:2:10
        _RANDOM_17 = `RANDOM;	// <stdin>:2:10
        _RANDOM_18 = `RANDOM;	// <stdin>:2:10
        _RANDOM_19 = `RANDOM;	// <stdin>:2:10
        _RANDOM_20 = `RANDOM;	// <stdin>:2:10
        _RANDOM_21 = `RANDOM;	// <stdin>:2:10
        _RANDOM_22 = `RANDOM;	// <stdin>:2:10
        _RANDOM_23 = `RANDOM;	// <stdin>:2:10
        _RANDOM_24 = `RANDOM;	// <stdin>:2:10
        _RANDOM_25 = `RANDOM;	// <stdin>:2:10
        _RANDOM_26 = `RANDOM;	// <stdin>:2:10
        _RANDOM_27 = `RANDOM;	// <stdin>:2:10
        _RANDOM_28 = `RANDOM;	// <stdin>:2:10
        _RANDOM_29 = `RANDOM;	// <stdin>:2:10
        _RANDOM_30 = `RANDOM;	// <stdin>:2:10
        _RANDOM_31 = `RANDOM;	// <stdin>:2:10
        regfile_0 = _RANDOM_0;	// regfile.scala:15:22
        regfile_1 = _RANDOM_1;	// regfile.scala:15:22
        regfile_2 = _RANDOM_2;	// regfile.scala:15:22
        regfile_3 = _RANDOM_3;	// regfile.scala:15:22
        regfile_4 = _RANDOM_4;	// regfile.scala:15:22
        regfile_5 = _RANDOM_5;	// regfile.scala:15:22
        regfile_6 = _RANDOM_6;	// regfile.scala:15:22
        regfile_7 = _RANDOM_7;	// regfile.scala:15:22
        regfile_8 = _RANDOM_8;	// regfile.scala:15:22
        regfile_9 = _RANDOM_9;	// regfile.scala:15:22
        regfile_10 = _RANDOM_10;	// regfile.scala:15:22
        regfile_11 = _RANDOM_11;	// regfile.scala:15:22
        regfile_12 = _RANDOM_12;	// regfile.scala:15:22
        regfile_13 = _RANDOM_13;	// regfile.scala:15:22
        regfile_14 = _RANDOM_14;	// regfile.scala:15:22
        regfile_15 = _RANDOM_15;	// regfile.scala:15:22
        regfile_16 = _RANDOM_16;	// regfile.scala:15:22
        regfile_17 = _RANDOM_17;	// regfile.scala:15:22
        regfile_18 = _RANDOM_18;	// regfile.scala:15:22
        regfile_19 = _RANDOM_19;	// regfile.scala:15:22
        regfile_20 = _RANDOM_20;	// regfile.scala:15:22
        regfile_21 = _RANDOM_21;	// regfile.scala:15:22
        regfile_22 = _RANDOM_22;	// regfile.scala:15:22
        regfile_23 = _RANDOM_23;	// regfile.scala:15:22
        regfile_24 = _RANDOM_24;	// regfile.scala:15:22
        regfile_25 = _RANDOM_25;	// regfile.scala:15:22
        regfile_26 = _RANDOM_26;	// regfile.scala:15:22
        regfile_27 = _RANDOM_27;	// regfile.scala:15:22
        regfile_28 = _RANDOM_28;	// regfile.scala:15:22
        regfile_29 = _RANDOM_29;	// regfile.scala:15:22
        regfile_30 = _RANDOM_30;	// regfile.scala:15:22
        regfile_31 = _RANDOM_31;	// regfile.scala:15:22
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:2:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:2:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_rdata1 = io_raddr1 == 5'h0 ? 32'h0 : _GEN_0;	// <stdin>:2:10, regfile.scala:18:27, :21:{21,32}
  assign io_rdata2 = io_raddr2 == 5'h0 ? 32'h0 : _GEN_1;	// <stdin>:2:10, regfile.scala:18:27, :21:21, :22:{21,32}
endmodule

