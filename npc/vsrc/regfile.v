// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifdef RANDOMIZE_MEM_INIT
  `define RANDOMIZE
`endif // RANDOMIZE_MEM_INIT

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifdef RANDOMIZE
  `ifdef VERILATOR
    `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
  `else  // VERILATOR
    `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
  `endif // VERILATOR
`else  // RANDOMIZE
  `define INIT_RANDOM_PROLOG_
`endif // RANDOMIZE

// VCS coverage exclude_file
module rf_combMem(	// regfile.scala:34:17
  input  [4:0]  R0_addr,
  input         R0_en,
                R0_clk,
  input  [4:0]  R1_addr,
  input         R1_en,
                R1_clk,
  input  [4:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [31:0] W0_data,
  output [31:0] R0_data,
                R1_data);

  reg [31:0] Memory[0:31];	// regfile.scala:34:17
  always @(posedge W0_clk) begin	// regfile.scala:34:17
    if (W0_en)	// regfile.scala:34:17
      Memory[W0_addr] <= W0_data;	// regfile.scala:34:17
  end // always @(posedge)
  `ifndef SYNTHESIS	// regfile.scala:34:17
    `ifdef RANDOMIZE_MEM_INIT	// regfile.scala:34:17
      integer initvar;	// regfile.scala:34:17
      reg [31:0] _RANDOM_MEM;	// regfile.scala:34:17
    `endif // RANDOMIZE_MEM_INIT
    initial begin	// regfile.scala:34:17
      `INIT_RANDOM_PROLOG_	// regfile.scala:34:17
      `ifdef RANDOMIZE_MEM_INIT	// regfile.scala:34:17
        for (initvar = 0; initvar < 32; initvar = initvar + 1) begin
          _RANDOM_MEM = {`RANDOM};
          Memory[initvar] = _RANDOM_MEM[31:0];
        end	// regfile.scala:34:17
      `endif // RANDOMIZE_MEM_INIT
    end // initial
  `endif // not def SYNTHESIS
  assign R0_data = R0_en ? Memory[R0_addr] : 32'bx;	// regfile.scala:34:17
  assign R1_data = R1_en ? Memory[R1_addr] : 32'bx;	// regfile.scala:34:17
endmodule

module regfile(	// <stdin>:2:10
  input         clock,
                reset,
  input  [4:0]  io_waddr,
                io_raddr1,
                io_raddr2,
  input  [31:0] io_wdata,
  input         io_wen,
  output [31:0] io_rdata1,
                io_rdata2);

  wire [31:0] _rf_ext_R0_data;	// regfile.scala:34:17
  wire [31:0] _rf_ext_R1_data;	// regfile.scala:34:17
  rf_combMem rf_ext (	// regfile.scala:34:17
    .R0_addr (io_raddr1),
    .R0_en   (1'h1),	// <stdin>:2:10
    .R0_clk  (clock),
    .R1_addr (io_raddr2),
    .R1_en   (1'h1),	// <stdin>:2:10
    .R1_clk  (clock),
    .W0_addr (io_waddr),
    .W0_en   (io_wen),
    .W0_clk  (clock),
    .W0_data (io_wdata),
    .R0_data (_rf_ext_R0_data),
    .R1_data (_rf_ext_R1_data)
  );
  assign io_rdata1 = io_raddr1 == 5'h0 ? 32'h0 : _rf_ext_R0_data;	// <stdin>:2:10, regfile.scala:34:17, :36:{21,32}
  assign io_rdata2 = io_raddr2 == 5'h0 ? 32'h0 : _rf_ext_R1_data;	// <stdin>:2:10, regfile.scala:34:17, :36:{21,32}, :37:{21,32}
endmodule

