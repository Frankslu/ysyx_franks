// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifdef RANDOMIZE_MEM_INIT
  `define RANDOMIZE
`endif // RANDOMIZE_MEM_INIT

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifdef RANDOMIZE
  `ifdef VERILATOR
    `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
  `else  // VERILATOR
    `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
  `endif // VERILATOR
`else  // RANDOMIZE
  `define INIT_RANDOM_PROLOG_
`endif // RANDOMIZE

// VCS coverage exclude_file
module rf_combMem(	// regfile.scala:36:17
  input  [4:0]  R0_addr,
  input         R0_en,
                R0_clk,
  input  [4:0]  R1_addr,
  input         R1_en,
                R1_clk,
  input  [4:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [31:0] W0_data,
  output [31:0] R0_data,
                R1_data);

  reg [31:0] Memory[0:31];	// regfile.scala:36:17
  always @(posedge W0_clk) begin	// regfile.scala:36:17
    if (W0_en)	// regfile.scala:36:17
      Memory[W0_addr] <= W0_data;	// regfile.scala:36:17
  end // always @(posedge)
  `ifndef SYNTHESIS	// regfile.scala:36:17
    `ifdef RANDOMIZE_MEM_INIT	// regfile.scala:36:17
      integer initvar;	// regfile.scala:36:17
      reg [31:0] _RANDOM_MEM;	// regfile.scala:36:17
    `endif // RANDOMIZE_MEM_INIT
    initial begin	// regfile.scala:36:17
      `INIT_RANDOM_PROLOG_	// regfile.scala:36:17
      `ifdef RANDOMIZE_MEM_INIT	// regfile.scala:36:17
        for (initvar = 0; initvar < 32; initvar = initvar + 1) begin
          _RANDOM_MEM = {`RANDOM};
          Memory[initvar] = _RANDOM_MEM[31:0];
        end	// regfile.scala:36:17
      `endif // RANDOMIZE_MEM_INIT
    end // initial
  `endif // not def SYNTHESIS
  assign R0_data = R0_en ? Memory[R0_addr] : 32'bx;	// regfile.scala:36:17
  assign R1_data = R1_en ? Memory[R1_addr] : 32'bx;	// regfile.scala:36:17
endmodule

module regfile(	// <stdin>:2:10
  input         clock,
  input  [4:0]  io_raddr1,
                io_raddr2,
  output [31:0] io_rdata1,
                io_rdata2);

  wire [31:0] _rf_ext_R0_data;	// regfile.scala:36:17
  wire [31:0] _rf_ext_R1_data;	// regfile.scala:36:17
  rf_combMem rf_ext (	// regfile.scala:36:17
    .R0_addr (io_raddr1),
    .R0_en   (1'h1),	// <stdin>:2:10
    .R0_clk  (clock),
    .R1_addr (io_raddr2),
    .R1_en   (1'h1),	// <stdin>:2:10
    .R1_clk  (clock),
    .W0_addr (5'h0),	// <stdin>:2:10
    .W0_en   (1'h1),	// <stdin>:2:10
    .W0_clk  (clock),
    .W0_data (32'h0),	// <stdin>:2:10
    .R0_data (_rf_ext_R0_data),
    .R1_data (_rf_ext_R1_data)
  );
  assign io_rdata1 = io_raddr1 == 5'h0 ? 32'h0 : _rf_ext_R0_data;	// <stdin>:2:10, regfile.scala:36:17, :38:{21,32}
  assign io_rdata2 = io_raddr2 == 5'h0 ? 32'h0 : _rf_ext_R1_data;	// <stdin>:2:10, regfile.scala:36:17, :39:{21,32}
endmodule

module ID_stage(	// <stdin>:20:10
  input         clock,
                reset,
  input  [31:0] tofs_inst,
  output [31:0] toes_alu_src1,
                toes_alu_src2,
  output [18:0] toes_alu_op,
  output        br_taken,
  output [31:0] br_target);

  wire [16:0] _GEN = ~(tofs_inst[31:15]);	// pla.scala:78:21
  regfile reg_0 (	// ID_stage.scala:26:21
    .clock     (clock),
    .io_raddr1 (tofs_inst[9:5]),	// ID_stage.scala:18:18
    .io_raddr2 (tofs_inst[14:10]),	// ID_stage.scala:20:18
    .io_rdata1 (toes_alu_src1),
    .io_rdata2 (toes_alu_src2)
  );
  assign toes_alu_op = {&{tofs_inst[15], tofs_inst[16], _GEN[2], _GEN[3], _GEN[4], _GEN[5], tofs_inst[21],
                _GEN[7], _GEN[8], _GEN[9], _GEN[10], _GEN[11], _GEN[12], _GEN[13], _GEN[14], _GEN[15],
                _GEN[16]}, &{tofs_inst[15], _GEN[1], _GEN[2], _GEN[3], _GEN[4], _GEN[5], tofs_inst[21],
                _GEN[7], _GEN[8], _GEN[9], _GEN[10], _GEN[11], _GEN[12], _GEN[13], _GEN[14], _GEN[15],
                _GEN[16]}, &{_GEN[0], tofs_inst[16], _GEN[2], _GEN[3], _GEN[4], _GEN[5], tofs_inst[21],
                _GEN[7], _GEN[8], _GEN[9], _GEN[10], _GEN[11], _GEN[12], _GEN[13], _GEN[14], _GEN[15],
                _GEN[16]}, &{_GEN[0], _GEN[1], _GEN[2], _GEN[3], _GEN[4], _GEN[5], tofs_inst[21], _GEN[7],
                _GEN[8], _GEN[9], _GEN[10], _GEN[11], _GEN[12], _GEN[13], _GEN[14], _GEN[15], _GEN[16]},
                &{tofs_inst[16], _GEN[2], tofs_inst[18], tofs_inst[19], tofs_inst[20], _GEN[6], _GEN[7],
                _GEN[8], _GEN[9], _GEN[10], _GEN[11], _GEN[12], _GEN[13], _GEN[14], _GEN[15], _GEN[16]},
                &{tofs_inst[15], _GEN[1], _GEN[2], tofs_inst[18], tofs_inst[19], tofs_inst[20], _GEN[6],
                _GEN[7], _GEN[8], _GEN[9], _GEN[10], _GEN[11], _GEN[12], _GEN[13], _GEN[14], _GEN[15],
                _GEN[16]}, &{_GEN[0], _GEN[1], _GEN[2], tofs_inst[18], tofs_inst[19], tofs_inst[20],
                _GEN[6], _GEN[7], _GEN[8], _GEN[9], _GEN[10], _GEN[11], _GEN[12], _GEN[13], _GEN[14],
                _GEN[15], _GEN[16]}, &{_GEN[12], tofs_inst[28], _GEN[14], _GEN[15], _GEN[16]}, |{&{_GEN[3],
                tofs_inst[19], tofs_inst[20], _GEN[6], _GEN[7], _GEN[8], _GEN[9], _GEN[10], _GEN[11],
                _GEN[12], _GEN[13], _GEN[14], _GEN[15], _GEN[16]}, &{tofs_inst[19], _GEN[5], _GEN[6],
                tofs_inst[22], _GEN[8], _GEN[9], _GEN[10], _GEN[11], _GEN[12], _GEN[13], _GEN[14],
                _GEN[15], _GEN[16]}}, |{&{tofs_inst[15], tofs_inst[16], tofs_inst[17], tofs_inst[18],
                _GEN[4], tofs_inst[20], _GEN[6], _GEN[7], _GEN[8], _GEN[9], _GEN[10], _GEN[11], _GEN[12],
                _GEN[13], _GEN[14], _GEN[15], _GEN[16]}, &{tofs_inst[18], _GEN[4], _GEN[5], _GEN[6],
                tofs_inst[22], _GEN[8], _GEN[9], _GEN[10], _GEN[11], _GEN[12], _GEN[13], _GEN[14],
                _GEN[15], _GEN[16]}}, |{&{_GEN[0], tofs_inst[16], tofs_inst[17], tofs_inst[18], _GEN[4],
                tofs_inst[20], _GEN[6], _GEN[7], _GEN[8], _GEN[9], _GEN[10], _GEN[11], _GEN[12], _GEN[13],
                _GEN[14], _GEN[15], _GEN[16]}, &{_GEN[3], _GEN[4], _GEN[5], _GEN[6], tofs_inst[22],
                _GEN[8], _GEN[9], _GEN[10], _GEN[11], _GEN[12], _GEN[13], _GEN[14], _GEN[15], _GEN[16]}},
                |{&{tofs_inst[15], tofs_inst[16], _GEN[2], tofs_inst[18], _GEN[4], tofs_inst[20], _GEN[6],
                _GEN[7], _GEN[8], _GEN[9], _GEN[10], _GEN[11], _GEN[12], _GEN[13], _GEN[14], _GEN[15],
                _GEN[16]}, &{tofs_inst[22], tofs_inst[23], tofs_inst[24], tofs_inst[25], _GEN[11],
                _GEN[12], _GEN[13], _GEN[14], _GEN[15], _GEN[16]}}, |{&{_GEN[0], tofs_inst[16], _GEN[2],
                tofs_inst[18], _GEN[4], tofs_inst[20], _GEN[6], _GEN[7], _GEN[8], _GEN[9], _GEN[10],
                _GEN[11], _GEN[12], _GEN[13], _GEN[14], _GEN[15], _GEN[16]}, &{_GEN[7], tofs_inst[23],
                tofs_inst[24], tofs_inst[25], _GEN[11], _GEN[12], _GEN[13], _GEN[14], _GEN[15], _GEN[16]}},
                &{_GEN[0], _GEN[1], _GEN[2], tofs_inst[18], _GEN[4], tofs_inst[20], _GEN[6], _GEN[7],
                _GEN[8], _GEN[9], _GEN[10], _GEN[11], _GEN[12], _GEN[13], _GEN[14], _GEN[15], _GEN[16]},
                |{&{tofs_inst[15], _GEN[1], _GEN[2], tofs_inst[18], _GEN[4], tofs_inst[20], _GEN[6],
                _GEN[7], _GEN[8], _GEN[9], _GEN[10], _GEN[11], _GEN[12], _GEN[13], _GEN[14], _GEN[15],
                _GEN[16]}, &{_GEN[8], tofs_inst[24], tofs_inst[25], _GEN[11], _GEN[12], _GEN[13], _GEN[14],
                _GEN[15], _GEN[16]}}, |{&{tofs_inst[15], _GEN[1], tofs_inst[17], _GEN[3], _GEN[4],
                tofs_inst[20], _GEN[6], _GEN[7], _GEN[8], _GEN[9], _GEN[10], _GEN[11], _GEN[12], _GEN[13],
                _GEN[14], _GEN[15], _GEN[16]}, &{tofs_inst[22], _GEN[8], _GEN[9], tofs_inst[25], _GEN[11],
                _GEN[12], _GEN[13], _GEN[14], _GEN[15], _GEN[16]}}, |{&{_GEN[0], _GEN[1], tofs_inst[17],
                _GEN[3], _GEN[4], tofs_inst[20], _GEN[6], _GEN[7], _GEN[8], _GEN[9], _GEN[10], _GEN[11],
                _GEN[12], _GEN[13], _GEN[14], _GEN[15], _GEN[16]}, &{_GEN[7], _GEN[8], _GEN[9],
                tofs_inst[25], _GEN[11], _GEN[12], _GEN[13], _GEN[14], _GEN[15], _GEN[16]}},
                &{tofs_inst[16], _GEN[2], _GEN[3], _GEN[4], tofs_inst[20], _GEN[6], _GEN[7], _GEN[8],
                _GEN[9], _GEN[10], _GEN[11], _GEN[12], _GEN[13], _GEN[14], _GEN[15], _GEN[16]},
                |{&{_GEN[1], _GEN[2], _GEN[3], _GEN[4], tofs_inst[20], _GEN[6], _GEN[7], _GEN[8], _GEN[9],
                _GEN[10], _GEN[11], _GEN[12], _GEN[13], _GEN[14], _GEN[15], _GEN[16]}, &{tofs_inst[23],
                _GEN[9], tofs_inst[25], _GEN[11], _GEN[12], _GEN[13], _GEN[14], _GEN[15], _GEN[16]},
                &{tofs_inst[27], tofs_inst[28], _GEN[14], _GEN[15], _GEN[16]}, &{_GEN[8], _GEN[11],
                tofs_inst[27], _GEN[13], tofs_inst[29], _GEN[15], _GEN[16]}, &{_GEN[7], _GEN[10], _GEN[11],
                tofs_inst[27], _GEN[13], tofs_inst[29], _GEN[15], _GEN[16]}, &{tofs_inst[30], _GEN[16]}}};	// <stdin>:20:10, Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29, :98:74, :114:39
  assign br_taken = 1'h1;	// <stdin>:20:10, ID_stage.scala:14:14
  assign br_target = 32'h0;	// <stdin>:20:10, ID_stage.scala:15:15
endmodule

